/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package abc2;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author vomin
 */
public class frmServer extends javax.swing.JFrame {

    /**
     * Creates new form frmServer
     */
    static ServerSocket serverSocket;
    static Socket client;
    static ObjectInputStream objectInputStream;
     static ObjectOutputStream objectOutputStream;
    static Ceasar ceasar = new Ceasar();
    static DataInputStream dataInputStream;

    public frmServer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        txtAShow = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtAShow.setColumns(20);
        txtAShow.setRows(5);
        jScrollPane2.setViewportView(txtAShow);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmServer().setVisible(true);
            }
        });

        try {
              
        serverSocket = new ServerSocket(8888);
        client = serverSocket.accept();
        System.out.println("Server have been connected with client");
        objectInputStream = new ObjectInputStream(client.getInputStream());
        objectOutputStream = new ObjectOutputStream(client.getOutputStream());
//        dataInputStream = new DataInputStream(client.getInputStream());
//        while (!str.equals("exit")) {            
//            str = dataInputStream.readUTF();
//            txtAShow.setText(txtAShow.getText().trim() + "\n" + str);
//       }
            while (true) {                
                Texts t = (Texts) objectInputStream.readObject();
                System.out.println(t.getStr());
                ceasar.WirteData(t.getStr(), t.getKey());
            txtAShow.setText(txtAShow.getText() + "\n" +"Chuoi ma hoa: "+ t.getStr() + " and key:  " + t.getKey());
            List<Texts> listText = new ArrayList<>();
            int count = 0;
            int max = 0;
            Map<String, Integer> map = new HashMap<String, Integer>();

            String str = ceasar.GiaiMa();
            txtAShow.setText(txtAShow.getText() + "\n" +"Chuoi giai ma: "+ str + " and key:  " + t.getKey());
            System.out.println(str);
            char temp;
            char[] ch = str.toCharArray();//abc => [a,b,c]
            System.out.println("ky tu"+Arrays.toString(ch));
            for (char c : ch) {

                for (int i = 0; i < ceasar.GiaiMa().length(); i++) {
                    System.out.println(ceasar.GiaiMa());
                    temp = ceasar.GiaiMa().charAt(i);
                    System.out.println(temp);
                    if (temp == c) {
                        count++;

                    }
                }
                 map.put(String.valueOf(c), count);
                count = 0;
            }
            Set<String> set = map.keySet();
            for (String key : set) {
                System.out.println(key + "" + map.get(key));
                listText.add(new Texts(key, map.get(key)));
            }
            objectOutputStream.writeObject(listText);
            
            }
            
            
            

          
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTextArea txtAShow;
    // End of variables declaration//GEN-END:variables
}
